{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 13, "column": 0}, "map": {"version":3,"sources":["file:///F:/MY%20CLASS/ALL%20OF%20MY%20PROJECTS/10_min_school_assesment/context/index.ts"],"sourcesContent":["import { LangType } from \"@/types/types\";\r\nimport { createContext } from \"react\";\r\n\r\ntype LangContextType = {\r\n    lang: LangType;\r\n    toggleLang: () => void;\r\n};\r\n\r\nexport const LangContext = createContext<LangContextType | undefined>(\r\n    undefined\r\n);\r\n"],"names":[],"mappings":";;;AACA;;AAOO,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EACnC","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///F:/MY%20CLASS/ALL%20OF%20MY%20PROJECTS/10_min_school_assesment/providers/lang-provider.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { LangType } from '@/types/types';\r\nimport { useState, ReactNode, useEffect } from 'react';\r\nimport { LangContext } from '@/context';\r\n\r\n\r\nexport function LanguageProvider({ children }: { children: ReactNode }) {\r\n    const [lang, setLang] = useState<LangType>('en');\r\n\r\n    // Initialize from localStorage or default\r\n    useEffect(() => {\r\n        const savedLang = localStorage.getItem('lang') as LangType | null;\r\n        if (savedLang) setLang(savedLang);\r\n    }, []);\r\n\r\n    const toggleLang = () => {\r\n        const newLang = lang === 'en' ? 'bn' : 'en';\r\n        setLang(newLang);\r\n        localStorage.setItem('lang', newLang);\r\n    };\r\n\r\n    return (\r\n        <LangContext.Provider value={{ lang, toggleLang }}>\r\n            {children}\r\n        </LangContext.Provider>\r\n    );\r\n}\r\n\r\nexport default LanguageProvider;"],"names":[],"mappings":";;;;;AAGA;AACA;AAJA;;;;AAOO,SAAS,iBAAiB,EAAE,QAAQ,EAA2B;IAClE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY;IAE3C,0CAA0C;IAC1C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACN,MAAM,YAAY,aAAa,OAAO,CAAC;QACvC,IAAI,WAAW,QAAQ;IAC3B,GAAG,EAAE;IAEL,MAAM,aAAa;QACf,MAAM,UAAU,SAAS,OAAO,OAAO;QACvC,QAAQ;QACR,aAAa,OAAO,CAAC,QAAQ;IACjC;IAEA,qBACI,8OAAC,gHAAA,CAAA,cAAW,CAAC,QAAQ;QAAC,OAAO;YAAE;YAAM;QAAW;kBAC3C;;;;;;AAGb;uCAEe","debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///F:/MY%20CLASS/ALL%20OF%20MY%20PROJECTS/10_min_school_assesment/providers/providers.tsx"],"sourcesContent":["\"use client\";\r\nimport React from \"react\";\r\nimport LangProvider from \"./lang-provider\";\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\r\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools'\r\nexport const Providers = ({ children }: { children: React.ReactNode }) => {\r\n    const queryClient = new QueryClient();\r\n    return (\r\n        <QueryClientProvider client={queryClient}>\r\n            <ReactQueryDevtools initialIsOpen={false} />\r\n            <LangProvider>\r\n                {children}\r\n            </LangProvider>\r\n        </QueryClientProvider>\r\n\r\n    );\r\n};"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AACA;AAJA;;;;;AAKO,MAAM,YAAY,CAAC,EAAE,QAAQ,EAAiC;IACjE,MAAM,cAAc,IAAI,6KAAA,CAAA,cAAW;IACnC,qBACI,8OAAC,sLAAA,CAAA,sBAAmB;QAAC,QAAQ;;0BACzB,8OAAC,oLAAA,CAAA,qBAAkB;gBAAC,eAAe;;;;;;0BACnC,8OAAC,8HAAA,CAAA,UAAY;0BACR;;;;;;;;;;;;AAKjB","debugId":null}}]
}